# -*- coding: utf-8 -*-
"""RNN using mnist dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19Ja3LGyhztHEqvhMaf8gZZuTS0D82BKU
"""

import tensorflow as tf
from tensorflow.keras.layers import Input, LSTM , Dense
from tensorflow.keras.models import Model
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical

(train_images , train_labels),(test_images, test_labels) = mnist.load_data()

#preprocessing in image
train_images = train_images.reshape((60000,28,28)).astype('float32')/255
test_images = test_images.reshape((10000,28,28)).astype('float32')/255

train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)

input_shape = (28,28)     #Each image is 28*28  pixels
inputs = Input(shape = input_shape)
rnn_layer = LSTM(128)(inputs)
outputs = Dense(10, activation='softmax')(rnn_layer)
model = Model(inputs = inputs , outputs = outputs)

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

model.fit(train_images, train_labels, epochs=5, batch_size = 64, validation_split = 0.2)

history = model.fit(train_images, train_labels, epochs=5, batch_size = 64, validation_split = 0.2)

import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['training data','validation data'], loc = 'lower right')

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])

plt.xlabel('epoch')
plt.ylabel('accuracy')
plt.title('loss model accuracy')
plt.legend(['training_data,validation_data'], loc='center')